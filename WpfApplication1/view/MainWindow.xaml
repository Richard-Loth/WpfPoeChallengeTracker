<Window x:Class="WpfPoeChallengeTracker.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfPoeChallengeTracker"
        xmlns:v="clr-namespace:WpfPoeChallengeTracker.view"
        xmlns:vm="using:Poe_Challenge_Tracker.viewmodel"
        mc:Ignorable="d"
        Title="MainWindow" Height="700" Width="525" MinWidth="500"
        SizeChanged="Window_SizeChanged"
        Closing="Window_Closing"
        LocationChanged="Window_LocationChanged"
        >
    <Window.Resources>
        <v:WidthCalculationConverter x:Key="WidthCalculator" />
        <v:IsDoneToTextcolorConverter x:Key="IsDoneConverter"/>
        <v:BooleanVisibilityConverter x:Key="IsCollapsedConverter"/>
        <v:BooleanVisibilityConverter x:Key="BoolVisibilityConverter"/>
        <v:ReverseBooleanVisibilityConverter x:Key="ReverseBoolVisibilityConverter"/>
        <v:IsCollapsedToButtonTextConverter x:Key="IsCollapsedToTextConverter" />
        <v:IsDoneToTextConverter x:Key="IsDoneToTextConverter" />
        <v:ChallengeIsDoneToCheckColorConverter x:Key="ChallengeIsDoneToCheckColorConverter"/>
        
        <Thickness x:Key="PanelBorderThickness">2</Thickness>
        <Thickness x:Key="TileMargin" Left="5" Right="5" Bottom="5" Top="0"></Thickness>
        <Style  x:Key="ButtonmenuStyle"
    TargetType="Button">
            <Setter Property="FontSize" Value="24" />
            <Setter Property="Foreground" Value="#FF745E43"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal"/>
                                    <VisualState x:Name="PointerOver">
                                        <Storyboard>
                                            <ColorAnimation Duration="0" To="White" Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="Content1" />
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Pressed">
                                        <Storyboard>
                                            <ColorAnimation Duration="0" To="#393185" Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="Content1" />
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Grid>
                                <ContentPresenter x:Name="Content1"/>
                            </Grid>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="MenuBaseStyle" TargetType="Control">
            <Setter Property="Background" Value="{StaticResource OverallBackgroundBrush}"/>
            <Setter Property="Foreground" Value="{StaticResource ChallengeHeaderForeground}"/>
            <Setter Property="BorderThickness" Value="0"/>
        </Style>
        <Style x:Key="MenuStyle" TargetType="Menu" BasedOn="{StaticResource MenuBaseStyle}">

        </Style>
        <Style x:Key="MenuItemStyle" TargetType="MenuItem" BasedOn="{StaticResource MenuBaseStyle}" >
            <Setter Property="BorderThickness" Value="0" />

        </Style>
        <Style x:Key="MenuSubItemStyle" TargetType="MenuItem" BasedOn="{StaticResource MenuBaseStyle}" >
            <Setter Property="BorderThickness" Value="0" />
        </Style>

        <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Separator}">
                        <Border Background="{StaticResource OverallBackgroundBrush}"
                                Height="1"
                                BorderThickness="0,0,0,1"
                                BorderBrush="{StaticResource ChallengeHeaderForeground}" 
                                Margin="0">
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ComboBoxItemStyle" TargetType="ComboBoxItem">
            <Setter Property="Background" Value="{StaticResource InsideChallengeBackgrundBrush}"/>
            <Setter Property="Foreground" Value="{StaticResource ChallengeDescriptionBrush}" />
            <Setter Property="BorderThickness" Value="0" />
        </Style>
    </Window.Resources>


    <Grid x:Name="grid" Background="{StaticResource OverallBackgroundBrush}" Margin="0,0,0,0">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Menu Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" IsMainMenu="True" Style="{StaticResource MenuStyle}">
            <MenuItem Header="File" Style="{StaticResource MenuItemStyle}">
                <MenuItem Name="EnterAccountNameMenuItem" Header="Enter Account Name" Style="{StaticResource MenuSubItemStyle}" Click="EnterAccountNameMenuItem_Click" />
                <MenuItem Header="Reset Progress" Style="{StaticResource MenuSubItemStyle}" Click="resetButton_Click"/>
                <Separator />
                <MenuItem Header="Exit" Style="{StaticResource MenuSubItemStyle}" Click="MenuItemExit_Click"/>
            </MenuItem>
            <MenuItem Header="View" Style="{StaticResource MenuItemStyle}">
                <MenuItem Header="Show Status" IsCheckable="True" IsChecked="{Binding TileVisibilityProp.ViewStatus, Mode=TwoWay}" Style="{StaticResource MenuSubItemStyle}"  />
                <MenuItem Header="Show Options" IsCheckable="True" IsChecked="{Binding TileVisibilityProp.ViewOptions, Mode=TwoWay}" Style="{StaticResource MenuSubItemStyle}" />
                <MenuItem Header="Show Challenges" IsCheckable="True" IsChecked="{Binding TileVisibilityProp.ViewChallenges, Mode=TwoWay}" Style="{StaticResource MenuSubItemStyle}" />
                <Separator />
                <MenuItem Header="Show Minutes and Seconds" Style="{StaticResource MenuSubItemStyle}" IsCheckable="True" IsChecked="{Binding TileVisibilityProp.ShowMinutesSeconds,Mode=TwoWay}"/>
            </MenuItem>

            <MenuItem Name="LeaguesMenuItem" Header="Leagues" ItemsSource="{Binding AvailableLeagues}" Style="{StaticResource MenuItemStyle}" IsEnabled="{Binding IsInitialized}">
                <MenuItem.Resources>
                    <Style TargetType="MenuItem" BasedOn="{StaticResource MenuSubItemStyle}">
                        <Setter Property="Header" Value="{Binding Name}" />
                        <Setter Property="IsChecked" Value="{Binding IsChecked, Mode=TwoWay}" />
                        <Style.Triggers>
                            <Trigger Property="HasItems" Value="False">
                                <Setter Property="IsCheckable" Value="True"/>
                            </Trigger>
                        </Style.Triggers>

                    </Style>
                </MenuItem.Resources>
            </MenuItem>
        </Menu>

        <TextBlock Visibility="{Binding IsInitialized, Mode=OneWay, Converter={StaticResource ReverseBoolVisibilityConverter}}" HorizontalAlignment="Center" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="1"  Text="Loading challenge data and progress"   Foreground="{StaticResource ChallengeDescriptionBrush}" />
        <Border MaxWidth="500" Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" BorderThickness="2" BorderBrush="{DynamicResource ChallengeStackBorder}" Margin="{DynamicResource TileMargin}" Visibility="{Binding TileVisibilityProp.IsStatusVisible}" >
            <Grid x:Name="statusGrid"  Background="{DynamicResource InsideChallengeBackgrundBrush}"  >
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <StackPanel Grid.Column="0" Orientation="Vertical" HorizontalAlignment="Stretch" VerticalAlignment="Center">
                    <TextBlock Text="{Binding LeagueName}" Foreground="{DynamicResource ChallengeDescriptionBrush}" HorizontalAlignment="Center" />
                    <TextBlock Name="CountCompletedTextBlock" Text="{Binding CountCompleted}" Foreground="{DynamicResource ChallengeDescriptionBrush}" HorizontalAlignment="Center" />
                    <Button Name="SyncProgressButton" Click="SyncProgressButton_Click" Content="Sync Progress"  Foreground="{DynamicResource ChallengeDescriptionBrush}" HorizontalAlignment="Center" Width="{Binding ActualWidth, ConverterParameter=0, Converter={StaticResource WidthCalculator}, ElementName=CountCompletedTextBlock, Mode=OneWay}" />
                </StackPanel>
                <TextBlock Grid.Row="0" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="{Binding Remaining.IsLeagueOver, Converter={StaticResource BoolVisibilityConverter}}" Text="League is over" Foreground="{DynamicResource ChallengeDescriptionBrush}" />
                <Grid Grid.Column="1" Width="Auto" Margin="20,0,0,0" HorizontalAlignment="Stretch" Visibility="{Binding Remaining.IsLeagueOver, Converter={StaticResource ReverseBoolVisibilityConverter}}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>

                    <TextBlock Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="4" Text="Remaining" FontSize="11" Foreground="{DynamicResource ChallengeDescriptionBrush}" HorizontalAlignment="Center"/>
                    <TextBlock Grid.Row="1" Grid.Column="0" Text="{Binding Remaining.RemainingDays}" FontSize="14" Foreground="{DynamicResource ChallengeDescriptionBrush}" Margin="5,0" HorizontalAlignment="Center"/>
                    <TextBlock Grid.Row="1" Grid.Column="1" Text="{Binding Remaining.RemainingHours}" FontSize="14" Foreground="{DynamicResource ChallengeDescriptionBrush}" Margin="5,0" HorizontalAlignment="Center"/>
                    <TextBlock Grid.Row="1" Grid.Column="2" Text="{Binding Remaining.RemainingMinutes}" FontSize="14" Foreground="{DynamicResource ChallengeDescriptionBrush}" Margin="5,0" HorizontalAlignment="Center" Visibility="{Binding TileVisibilityProp.ShowMinutesSeconds, Converter={StaticResource BoolVisibilityConverter}}"/>
                    <TextBlock Grid.Row="1" Grid.Column="3" Text="{Binding Remaining.RemainingSeconds}" FontSize="14" Foreground="{DynamicResource ChallengeDescriptionBrush}" Margin="5,0" HorizontalAlignment="Center" Visibility="{Binding TileVisibilityProp.ShowMinutesSeconds, Converter={StaticResource BoolVisibilityConverter}}"/>
                    <TextBlock Grid.Row="2" Grid.Column="0" Text="Days" FontSize="11" Foreground="{DynamicResource ChallengeDescriptionBrush}" Margin="5,2" />
                    <TextBlock Grid.Row="2" Grid.Column="1" Text="Hours" FontSize="11" Foreground="{DynamicResource ChallengeDescriptionBrush}" Margin="5,2" />
                    <TextBlock Grid.Row="2" Grid.Column="2" Text="Minutes" FontSize="11" Foreground="{DynamicResource ChallengeDescriptionBrush}" Margin="5,2" Visibility="{Binding TileVisibilityProp.ShowMinutesSeconds, Converter={StaticResource BoolVisibilityConverter}}" />
                    <TextBlock Grid.Row="2" Grid.Column="3" Text="Seconds" FontSize="11" Foreground="{DynamicResource ChallengeDescriptionBrush}" Margin="5,2" Visibility="{Binding TileVisibilityProp.ShowMinutesSeconds, Converter={StaticResource BoolVisibilityConverter}}" />
                </Grid>
            </Grid>
        </Border>
        <Border MaxWidth="500" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="3" Visibility="{Binding TileVisibilityProp.IsOptionsVisible}" BorderBrush="{DynamicResource ChallengeStackBorder}" BorderThickness="{DynamicResource PanelBorderThickness}" Margin="{DynamicResource TileMargin}" >
            <Grid x:Name="optionsGrid" Background="{StaticResource InsideChallengeBackgrundBrush}" >
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>

                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <TextBlock Grid.Row="0" Grid.Column="0" VerticalAlignment="Center"  Text="Completed challenges:" Margin="5,0" RenderTransformOrigin="0.5,0.5" Foreground="{DynamicResource ChallengeDescriptionBrush}" />
                <ComboBox Name="completedChallengesCombobox" SelectionChanged="completedChallengesCombobox_SelectionChanged" Grid.Row="0" Grid.Column="1" Margin="0,0,10,0" Width="85" VerticalAlignment="Center" FontSize="11" Background="{DynamicResource InsideChallengeBackgrundBrush}" Foreground="{DynamicResource ChallengeDescriptionBrush}">
                    <ComboBoxItem Style="{StaticResource ComboBoxItemStyle}" Content="Do nothing" />
                    <ComboBoxItem Style="{StaticResource ComboBoxItemStyle}" Content="Sort to end"   />
                    <ComboBoxItem Style="{StaticResource ComboBoxItemStyle}" Content="Hide" />
                </ComboBox>
                <TextBlock Grid.Row="0" Grid.Column="2" Text="Filter:" VerticalAlignment="Center" Foreground="{StaticResource ChallengeDescriptionBrush}" Margin="0,0,5,0"/>
                <TextBox Grid.Row="0" Grid.Column="3" x:Name="filterTextBox"  HorizontalAlignment="Stretch" Margin="0" TextChanged="filterTextBox_TextChanged" VerticalAlignment="Center"  />
            </Grid>

        </Border>
        <ListView ScrollViewer.CanContentScroll="False"  x:Name="challengesListview" Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="2"  PreviewMouseWheel="challengesListview_PreviewMouseWheel"   Margin="{DynamicResource TileMargin}" Visibility="{Binding TileVisibilityProp.IsChallengesVisible}"  HorizontalAlignment="Stretch" MinWidth="250" MaxWidth="500" ItemsSource="{Binding ChallengeViews, Mode=OneWay}"  AllowDrop="True" BorderBrush="{StaticResource ChallengeStackBorder}" BorderThickness="{DynamicResource PanelBorderThickness}" Background="{StaticResource InsideChallengeBackgrundBrush}"   SelectionChanged="challengesListView_SelectionChanged" >

            <ListView.ItemContainerStyle>
                <Style TargetType="ListViewItem">
                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                </Style>
            </ListView.ItemContainerStyle>
            <ListView.ItemTemplate >
                <DataTemplate DataType="vm:ChallengeView">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid Name="challengeMainlineGrid" Grid.Row="0" Grid.Column="0" HorizontalAlignment="Stretch">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="50"/>
                                <ColumnDefinition Width="50"/>
                            </Grid.ColumnDefinitions>
                            <Border Grid.Column="0" Grid.Row="0" Grid.ColumnSpan="4" BorderThickness="4,2"  >
                                <Border.BorderBrush>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#FF2C220E" Offset="0"/>
                                        <GradientStop Color="#FF977C40" Offset="0.5"/>
                                        <GradientStop Color="#FF56482D" Offset="1"/>
                                    </LinearGradientBrush>
                                </Border.BorderBrush>

                                <Border.Background>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#FF2F1818" Offset="0"/>
                                        <GradientStop Color="#FF0D0C0C" Offset="1"/>
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                            <Button x:Name="collapseButton2" Grid.Column="0" Grid.Row="0" Content="{Binding IsCollapsed, Converter={StaticResource IsCollapsedToTextConverter}, Mode=OneWay}"   Click="collapseBtnClick" Foreground="{StaticResource ChallengeHeaderForeground}" BorderThickness="4" VerticalAlignment="Center">
                                <Button.BorderBrush>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#FF2C220E" Offset="0"/>
                                        <GradientStop Color="#FF977C40" Offset="0.5"/>
                                        <GradientStop Color="#FF56482D" Offset="1"/>
                                    </LinearGradientBrush>
                                </Button.BorderBrush>
                                <Button.Background>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#FF1D0B00" Offset="0"/>
                                        <GradientStop Color="#FF3F1702" Offset="1"/>
                                    </LinearGradientBrush>
                                </Button.Background>
                            </Button>
                            <TextBlock Name="challengeNameTextBlock" Grid.Row="0" Grid.Column="1"  Text="{Binding ChallengeName, Mode=OneWay}" Foreground="{StaticResource ChallengeHeaderForeground}" VerticalAlignment="Center"  Margin="16,0,0,0" Background="#00000000"/>
                            <TextBlock  Name="challengeProgressTextBlock" Grid.Row="0" Grid.Column="2"  Text="{Binding CurrentProgress, Mode=OneWay}" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="{StaticResource ChallengeHeaderForeground}" />
                            <Button Name="isDoneButton2" Grid.Row="0" Grid.Column="3"   Content="{Binding IsDone, Converter={StaticResource IsDoneToTextConverter}, Mode=OneWay}" Foreground="{Binding IsDone, Converter={StaticResource ChallengeIsDoneToCheckColorConverter}, Mode=OneWay}" Click="ChallengeIsDoneClick" FontSize="17" Background="#00000000" BorderBrush="#00707070" HorizontalAlignment="Stretch" Width="50" Margin="0,0,15,0" />
                        </Grid>
                        <Grid Name="challengeInteriorGrid" Grid.Row="1" Grid.Column="0" HorizontalAlignment="Stretch"  Visibility="{Binding IsCollapsed, Converter={StaticResource IsCollapsedConverter}, Mode=OneWay}" Background="{DynamicResource InsideChallengeBackgrundBrush}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock x:Name="ChallengeDescriptionTextBlock2"  Grid.Row="0" Grid.Column="0" Width="{Binding ActualWidth, ConverterParameter=80, Converter={StaticResource WidthCalculator}, ElementName=challengeNameTextBlock, Mode=OneWay}"  TextWrapping="Wrap"    Text="{Binding Description, Mode=OneTime}"  Foreground="{StaticResource ChallengeDescriptionBrush}" Margin="10,8,0,8" HorizontalAlignment="Left" />
                            <ListView x:Name="subChallengesListView" Grid.Row="1"  Grid.Column="0" Width="{Binding ActualWidth, ConverterParameter=135, Converter={StaticResource WidthCalculator}, ElementName=challengeNameTextBlock, Mode=OneWay}" ScrollViewer.HorizontalScrollBarVisibility="Auto"  ItemsSource="{Binding SubChallenges}" SelectionMode="Single" SelectionChanged="subChallengesListView_SelectionChanged" Background="#00000000" Visibility="{Binding IsCollapsed, Converter={StaticResource IsCollapsedConverter}, Mode=OneWay}" BorderBrush="#00101011" HorizontalAlignment="Left"  >
                                <ListView.ItemContainerStyle>
                                    <Style TargetType="ListViewItem">
                                        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                                    </Style>
                                </ListView.ItemContainerStyle>
                                <ListView.ItemTemplate >
                                    <DataTemplate DataType="vm:SubChallengeView"  >
                                        <Grid VerticalAlignment="Center"   >
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="Auto" />
                                            </Grid.ColumnDefinitions>
                                            <TextBlock Grid.Column="0" Text="{Binding Description}" FontSize="12" Foreground="{Binding IsDone, Converter={StaticResource IsDoneConverter}, Mode=OneWay}" Margin="0,0,8,0"  VerticalAlignment="Center"  />
                                            <ListView Name="subChallengeInf" Grid.Column="1"  ItemsSource="{Binding InfoViews}" SelectionChanged="subChallengeInfoListView_SelectionChanged" Background="#00101011" BorderBrush="#00101011"  >
                                                <ListView.ItemsPanel>
                                                    <ItemsPanelTemplate>
                                                        <StackPanel Orientation="Horizontal"  >

                                                        </StackPanel>
                                                    </ItemsPanelTemplate>
                                                </ListView.ItemsPanel>
                                                <ListView.ItemTemplate >

                                                    <DataTemplate DataType="vm:SubChallengeInfoView">
                                                        <StackPanel >
                                                            <StackPanel.Resources>
                                                                <Style TargetType="TextBlock">
                                                                    <Setter Property="Margin" Value="0,0,0,0"/>
                                                                    <Setter Property="Padding" Value="0"/>
                                                                </Style>
                                                            </StackPanel.Resources>
                                                            <TextBlock Text="{Binding Text, Mode=OneTime}" FontSize="12"  Visibility="{Binding HasUrl, Converter={StaticResource ReverseBoolVisibilityConverter}, Mode=OneTime}" Foreground="{StaticResource ChallengeDescriptionBrush}" VerticalAlignment="Center" Width="Auto" Background="#00000000"/>
                                                            <TextBlock Visibility="{Binding HasUrl, Converter={StaticResource BoolVisibilityConverter}, Mode=OneTime}" Foreground="{StaticResource ChallengeDescriptionBrush}" FontSize="12" VerticalAlignment="Center" Width="Auto">
        																	<Span>
        																		<Hyperlink NavigateUri="{Binding Url}" RequestNavigate="Hyperlink_RequestNavigate">
        																			<Run Text="{Binding Text, Mode=OneTime}"/>
        																		</Hyperlink>  
        																	</Span>
                                                            </TextBlock>
                                                        </StackPanel>
                                                    </DataTemplate>
                                                </ListView.ItemTemplate>
                                            </ListView>
                                        </Grid>
                                    </DataTemplate>
                                </ListView.ItemTemplate>
                            </ListView>
                        </Grid>
                    </Grid>
                </DataTemplate>
            </ListView.ItemTemplate>
        </ListView>
        <Grid Name="StatusBarGrid" Grid.Row="5" Grid.Column="0" Grid.ColumnSpan="2" Background="Black" >
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <TextBlock Name="loginStatusTextBlock" Grid.Row="0" Grid.Column="0" Foreground="White" Text="{Binding LoginStatusText, Mode=OneWay}" Margin="10,0,0,0" />
            <TextBlock Name="syncStatusTextBlock" Grid.Row="0" Grid.Column="1" Foreground="White" Text="{Binding SyncStatusText, Mode=OneWay}" Margin="10,0,0,0" />
        </Grid>
    </Grid>
</Window>
